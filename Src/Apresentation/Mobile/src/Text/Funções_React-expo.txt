Funções Comuns no React Native com Expo


1. useState
O que faz: Define um estado em componentes funcionais.
Como usar: [state, setState] = useState(initialValue);
  Exemplo:
const [name, setName] = useState('');

2. useEffect
O que faz: Executa efeitos colaterais em componentes funcionais, como chamadas à API ou manipulação do DOM.
Como usar: useEffect(callback, [dependencies]);
  Exemplo:
useEffect(() => {
  console.log('Componente montado');
}, []);

3. useNavigation
O que faz: Permite acessar a navegação dentro de componentes funcionais.
Como usar: const navigation = useNavigation();
  Exemplo:
navigation.navigate('Home');

4. useRoute
O que faz: Acessa informações da rota atual, como parâmetros passados para a tela.
Como usar: const route = useRoute();
  Exemplo:
const { id } = route.params;

5. Text
O que faz: Componente para renderizar textos.
Como usar: <Text>Texto aqui</Text>
  Exemplo:
<Text>Bem-vindo ao app!</Text>

6. View
O que faz: Componente básico de layout, usado para criar blocos de interface.
Como usar: <View>...</View>
  Exemplo:
<View>
  <Text>Texto dentro de uma View</Text>
</View>

7. TouchableOpacity
O que faz: Componente de botão que altera sua opacidade quando pressionado.
Como usar: <TouchableOpacity onPress={handlePress}>...</TouchableOpacity>
  Exemplo:
<TouchableOpacity onPress={() => console.log('Pressionado')}>
  <Text>Clique aqui</Text>
</TouchableOpacity>

8. Image
O que faz: Exibe imagens na tela.
Como usar: <Image source={require('./path/to/image.png')} />
  Exemplo:
<Image source={{ uri: 'https://example.com/image.jpg' }} style={{ width: 100, height: 100 }} />

9. FlatList
O que faz: Exibe uma lista de itens de forma otimizada.
Como usar: <FlatList data={data} renderItem={renderItem} keyExtractor={keyExtractor} />
  Exemplo:
<FlatList
  data={myData}
  renderItem={({ item }) => <Text>{item.name}</Text>}
  keyExtractor={item => item.id}
/>

10. Alert
O que faz: Exibe um pop-up de alerta.
Como usar: Alert.alert(title, message);
  Exemplo:
Alert.alert('Erro', 'Algo deu errado');
Funções Comuns no Firebase
Aqui estão algumas funções e métodos frequentemente utilizados ao integrar Firebase com um projeto React Native:

1. collection
O que faz: Acessa uma coleção específica no Firestore.
Como usar: const ref = collection(firestore, 'nome-da-coleção');
  Exemplo:
const usersCollection = collection(firestore, 'users');

2. doc
O que faz: Acessa um documento específico dentro de uma coleção.
Como usar: const ref = doc(firestore, 'nome-da-coleção', 'id-do-documento');
  Exemplo:
const userDoc = doc(firestore, 'users', 'userId');

3. getDocs
O que faz: Retorna todos os documentos de uma coleção como um snapshot.
Como usar: const snapshot = await getDocs(collectionRef);
  Exemplo:
const querySnapshot = await getDocs(usersCollection);

4. getDoc
O que faz: Retorna um documento específico de uma coleção.
Como usar: const snapshot = await getDoc(docRef);
  Exemplo:
const userSnapshot = await getDoc(userDoc);

5. setDoc
O que faz: Cria ou sobrescreve um documento em uma coleção.
Como usar: await setDoc(docRef, data);
  Exemplo:
await setDoc(userDoc, { name: 'John Doe', age: 30 });

6. updateDoc
O que faz: Atualiza campos específicos de um documento sem sobrescrevê-lo completamente.
Como usar: await updateDoc(docRef, { campo: valor });
  Exemplo:
await updateDoc(userDoc, { age: 31 });

7. addDoc
O que faz: Adiciona um novo documento a uma coleção, gerando automaticamente um ID.
Como usar: await addDoc(collectionRef, data);
  Exemplo:
await addDoc(usersCollection, { name: 'Jane Doe', age: 25 });

8. deleteDoc
O que faz: Remove um documento de uma coleção.
Como usar: await deleteDoc(docRef);
  Exemplo:
await deleteDoc(userDoc);

9. onSnapshot
O que faz: Ouvinte em tempo real para mudanças em um documento ou coleção.
Como usar: onSnapshot(docRef, (snapshot) => { ... });
  Exemplo:
onSnapshot(userDoc, (doc) => {
  console.log('Dados atualizados:', doc.data());

});
10. forEach
O que faz: Itera sobre cada documento dentro de um QuerySnapshot.
Como usar: querySnapshot.forEach(doc => { ... });
  Exemplo:
querySnapshot.forEach((doc) => {
  console.log(doc.id, '=>', doc.data());

});
11. Blob
O que faz: Representa dados binários, frequentemente usado para manipular arquivos.
Como usar: const blob = new Blob([data], { type: 'tipo/mime' });
  Exemplo:
const imageBlob = new Blob([imageData], { type: 'image/jpeg' });